import java.util.Random;
import java.util.concurrent.ArrayBlockingQueue;

public class App {

    private static ArrayBlockingQueue<Integer> queue = new ArrayBlockingQueue<Integer>(10);
    
    static Random random = new Random();

    public static void main(String[] args) {

        Thread thread1 = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    producer();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });

        Thread thread2 = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    consumer();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });

        thread1.start();
        thread2.start();
    }
    public static void producer() throws InterruptedException {

        while(true) {
            queue.put(random.nextInt(100));
        }
    }
    public static void consumer() throws InterruptedException {
        while(true) {
            Thread.sleep(100);
            if(random.nextInt(10) == 0) {
                Integer value = queue.take();
                System.out.println("value: " + value + " queue size is: " + queue.size());
            }
        }
    }
}
