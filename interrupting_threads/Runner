import java.util.Random;
import java.util.concurrent.*;

public class Runner {

    public static void main(String[] args) throws InterruptedException {
        System.out.println("starting ...");

        ExecutorService executorService = Executors.newCachedThreadPool();
        Random random = new Random();

        Future<?> future =
                executorService.submit(new Callable<Void>() {
                   @Override
                   public Void call() throws Exception {
                     for(int i = 0; i < 1E8; i++) {
                         if(Thread.currentThread().interrupted()) {
                             System.out.println("thread is interrupted!");
                             break;
                         }
                         Math.sin(random.nextDouble());
                     }
                     return null;
                   }
                });

        executorService.shutdown();

        Thread.sleep(100);
        future.cancel(true);
        executorService.awaitTermination(1, TimeUnit.DAYS);

        System.out.println("ending ...");
    }
}
