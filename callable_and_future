import java.io.IOException;
import java.util.Random;
import java.util.concurrent.*;

public class Runner {

    public static void main(String[] args) {
        ExecutorService executorService = Executors.newCachedThreadPool();
        Random random = new Random();

        Future<?> future = executorService.submit(new Callable<Void>() {
            @Override
            public Void call() throws Exception {
                System.out.println("starting ...");

                int duration = random.nextInt(2000);

                if(duration > 800) {
                    throw new IOException("sleeping for too long");
                }

                Thread.sleep(duration);

                System.out.println("ending ...");
                return null;
            }
        });

        try {
            System.out.println("return value is : " + future.get());
        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch(ExecutionException e) {
            e.printStackTrace();
        }

        executorService.shutdown();
    }
}
